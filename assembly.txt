

.intel_syntax noprefix  

.section .data        

input: .asciz "%d"    # string terminated by 0 that will be used for scanf parameter
output: .asciz "The sum is: %f\n"     # string terminated by 0 that will be used for printf parameter

n: .int 0             # input variable
s: .double 0.0        # sum variable store the calculated value
one: .double 1.0
r: .double 1.0         #counter to increase by one to calculate the equation untill it reach to n


.section .text       
.globl _main          # make main accessible from external

_main:                
   push OFFSET n      # push to stack the address of  n
   push OFFSET input  # push to stack the first parameter to scanf
   call _scanf        
   add esp, 8         # pop the above two parameters from the stack 

   mov ecx, n         #  number of iterations
loop1:
   #  increase s by 1/r^2 and increase it by r to get (r+1/r^2)
   fld qword ptr one            # push 1 to stack
   fdiv qword ptr r             # pop stack top which is one, and divide it by r then push the result (1/r)
   fdiv qword ptr r             # pop  stack top (1/r) , and divide it by r then push the result (1/r^2)
   fadd qword ptr r             # pop the stack top (1/r^2) and add r to it which in first equal 1 and push the result (1+1/r^2)

   fadd qword ptr s             # pop  stack top (1+1/r^2), add it to s, and push the result (s+(1+1/r^2))
   fstp qword ptr s             # pop stack top (s+(1+1/r^2)) into the memory variable s

   #  increase r by 1
   fld qword ptr r              # push 1 to the floating point stack
   fadd qword ptr one           # pop  stack top (1), add it to r and push the result (r+1)
   fstp qword ptr r             # pop  stack top (r+1) into the memory variable r

   loop loop1         

   push [s+4]         
   push s             
   push OFFSET output # push to stack the first parameter to printf
   call _printf       
   add esp, 12        # pop the two parameters

   ret                # end  function